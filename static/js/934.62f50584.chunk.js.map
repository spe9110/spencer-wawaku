{"version":3,"file":"static/js/934.62f50584.chunk.js","mappings":"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","sources":["component/Main/ReactLeafletMap.js","component/Main/AlertMessage/UseSubmit.js","component/Main/Contact.js"],"sourcesContent":["import React from 'react';\r\nimport { useState } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet';\r\nimport './MainSass/index_main.css';\r\n\r\nfunction LocationMarker() {\r\n    const [position, setPosition] = useState(null)\r\n    const map = useMapEvents({\r\n      click() {\r\n        map.locate()\r\n      },\r\n      locationfound(e) {\r\n        setPosition(e.latlng)\r\n        map.flyTo(e.latlng, map.getZoom())\r\n      },\r\n    })\r\n  \r\n    return position === null ? null : (\r\n        <Marker position={position}>\r\n            <Popup>\r\n            Hello, I'm Spencer.\r\n            </Popup>\r\n        </Marker>\r\n    )\r\n}\r\n\r\nexport default function ReactLeafletMap(){\r\n\r\n    return(\r\n        <MapContainer center={{ lat: 51.505, lng: -0.09 }} zoom={16} scrollWheelZoom={false} id=\"map\">\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <LocationMarker/>           \r\n        </MapContainer>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst useSubmit = () => {\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [response, setResponse] = useState(null);\r\n\r\n  const submit = async (url, data) => {\r\n    setLoading(true);\r\n    try {\r\n      const res = await axios.post(url, data, {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      setResponse({\r\n        type: 'success',\r\n        message: `Thanks ${data.firstName} for your submission, I will get back to you shortly!`,\r\n      });\r\n      console.log(res.data);      \r\n    } catch (error) {\r\n      setResponse({\r\n        type: 'error',\r\n        message: 'Something went wrong, please try again later!',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { isLoading, response, submit };\r\n};\r\n\r\nexport default useSubmit;\r\n","import React, { useEffect, memo } from \"react\";\r\nimport { useFormik } from \"formik\"; \r\nimport * as Yup from 'yup'; \r\nimport { \r\n  Button, \r\n  FormControl,\r\n  FormErrorMessage,  \r\n  FormLabel, \r\n  Input, \r\n  Textarea,\r\n  Select \r\n} from \"@chakra-ui/react\"; \r\nimport './MainSass/index_main.css';\r\nimport ReactLeafletMap from './ReactLeafletMap';\r\nimport UseSubmit from './AlertMessage/UseSubmit';\r\nimport { useAlertContext } from './AlertMessage/AlertContext';\r\nimport { useTheme } from '../Header/DarkMode';\r\n\r\nfunction Contact(){\r\n  const { theme } = useTheme();\r\n  const { isLoading, response, submit }  = UseSubmit();\r\n  const { onOpen } = useAlertContext();\r\n  \r\n  // initialization\r\n    const formik = useFormik({ \r\n        initialValues: {\r\n            firstName: '',\r\n            lastName: '',\r\n            type: '', \r\n            email: '',\r\n            comment: '',\r\n        },\r\n        onSubmit: async (values) => {\r\n          await submit(\"https://spencer-backend2.onrender.com/contact\", values);\r\n        },\r\n\r\n        validationSchema: Yup.object({ \r\n          firstName: Yup.string().min(2, 'Too Short!').max(20, 'Too Long!').required(\"Required\"),\r\n          lastName: Yup.string().min(2, 'Too Short!').max(20, 'Too Long!').required(\"Required\"), \r\n          type: Yup.string().required(\"Required\"), \r\n          email: Yup.string().email(\"Invalid email address\").required(\"Required\"), \r\n          comment: Yup.string()\r\n            .min(50, 'Too Short!') \r\n            .max(140, 'Your message cannot exceed 140 characters!') \r\n            .required(\"Required\") \r\n        }),\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n      if (response) { \r\n        onOpen(response.type, response.message);\r\n        if (response.type === 'success') { \r\n          formik.resetForm(); \r\n        }  \r\n      } \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [response]); \r\n\r\n    return(\r\n        <div className={`Contact ${theme === 'light' ? 'dark-mode' : 'light'}`} role='main'>\r\n            <h3 className=\"Contact__title\">Contact</h3>\r\n            <p className=\"Contact__touch\">Let's get in touch</p>\r\n            <div className='Contact__form'>\r\n                <div className=\"Contact__form__map\" id='map'>\r\n                    <ReactLeafletMap/>\r\n                </div>\r\n                <div className=\"Contact__form__content\" id='form' role='form'>\r\n                    <form onSubmit={formik.handleSubmit}> \r\n                        <FormControl isRequired isInvalid={!!formik.errors.firstName && formik.touched.firstName}>\r\n                            <FormLabel htmlFor=\"first name\">First name</FormLabel>\r\n                            <Input\r\n                            id=\"firstName\"\r\n                            name=\"firstName\"\r\n                            type='text' \r\n                            placeholder='First name' \r\n                            {...formik.getFieldProps(\"firstName\")}\r\n                            />\r\n                            <FormErrorMessage>{formik.errors.firstName}</FormErrorMessage>\r\n                        </FormControl>             \r\n                        <FormControl isRequired isInvalid={!!formik.errors.lastName && formik.touched.lastName}>\r\n                            <FormLabel htmlFor=\"last name\">Last name</FormLabel>\r\n                            <Input\r\n                            id=\"lastName\"\r\n                            name=\"lastName\"\r\n                            type='text' \r\n                            placeholder='Last name' \r\n                            {...formik.getFieldProps(\"lastName\")}\r\n                            />\r\n                            <FormErrorMessage>{formik.errors.lastName}</FormErrorMessage>\r\n                        </FormControl>             \r\n                        <FormControl>\r\n                            <FormLabel htmlFor=\"type\">Object</FormLabel>\r\n                            <Select id=\"type\" name=\"type\" {...formik.getFieldProps(\"type\")} placeholder=\"Select an object\"> \r\n                              <option value=\"Freelance project proposal\">Freelance project proposal</option> \r\n                              <option value=\"Building website\">Building website</option> \r\n                              <option value=\"Performance and Optimization\">Performance and Optimization</option> \r\n                              <option value=\"SEO\">SEO</option> \r\n                              <option value=\"Maintenance and Updates\">Maintenance and Updates</option> \r\n                              <option value=\"Photoshop\">Photoshop</option> \r\n                              <option value=\"Web consulting\">Web consulting</option> \r\n                              <option value=\"Mentorship\">Mentorship</option> \r\n                              <option value=\"Other Services\">Other Services</option> \r\n                            </Select>\r\n                            <FormErrorMessage>{formik.errors.type}</FormErrorMessage>\r\n                        </FormControl>\r\n                        <FormControl isRequired isInvalid={!!formik.errors.email && formik.touched.email}>\r\n                            <FormLabel htmlFor=\"email\">Email address</FormLabel>\r\n                            <Input\r\n                              id=\"email\"\r\n                              name=\"email\"\r\n                              type='email' \r\n                              placeholder='Enter your email'\r\n                              {...formik.getFieldProps(\"email\")}\r\n                              />\r\n                            <FormErrorMessage>{formik.errors.email}</FormErrorMessage>\r\n                        </FormControl>             \r\n                        <FormControl isRequired isInvalid={!!formik.errors.comment && formik.touched.comment}>\r\n                            <FormLabel htmlFor=\"comment\">Your message</FormLabel>\r\n                            <Textarea \r\n                                id=\"comment\" \r\n                                name=\"comment\"\r\n                                height={140} \r\n                                placeholder='Message'\r\n                                {...formik.getFieldProps(\"comment\")}\r\n                            />\r\n                            <FormErrorMessage>{formik.errors.comment}</FormErrorMessage>\r\n                        </FormControl>\r\n                        <Button type=\"submit\" colorScheme=\"blue\" width=\"full\" isLoading={isLoading}> \r\n                            Submit \r\n                        </Button>              \r\n                    </form> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default memo(Contact);"],"names":["LocationMarker","position","setPosition","useState","map","useMapEvents","click","locate","locationfound","e","latlng","flyTo","getZoom","_jsx","Marker","children","Popup","ReactLeafletMap","_jsxs","MapContainer","center","lat","lng","zoom","scrollWheelZoom","id","TileLayer","attribution","url","useSubmit","isLoading","setLoading","response","setResponse","submit","async","data","res","axios","post","headers","type","message","firstName","console","log","error","Contact","theme","useTheme","UseSubmit","onOpen","useAlertContext","formik","useFormik","initialValues","lastName","email","comment","onSubmit","values","validationSchema","Yup","min","max","required","useEffect","resetForm","className","role","handleSubmit","FormControl","isRequired","isInvalid","errors","touched","FormLabel","htmlFor","Input","name","placeholder","getFieldProps","FormErrorMessage","Select","value","Textarea","height","Button","colorScheme","width","memo"],"sourceRoot":""}